package main

import (
	"fpga-ultrasound-go/memory"
	"fpga-ultrasound-go/storage"
	"fpga-ultrasound-go/ultrasignal"
	"log"
	"math"
	"time"
)

const (
	Path                = "/home/root/data"
	FileWithFreq        = "[AFC]"
	FileWithTime        = "[Time]"
	FilterWindow        = 5
	CurrentSampleRateHz = 1e5                      // 0.1 –ú–ì—Ü
	SampleRateHz        = CurrentSampleRateHz * 10 // 10 –ú–ì—Ü ‚Äî —Ç–∏–ø–∏—á–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏ —É–ª—å—Ç—Ä–∞–∑–≤—É–∫–∞
	FFTKernelSize       = 1000                     // —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –¥–ª—è FFT
	FIRKernelSize       = 101                      // –Ω–µ—á—ë—Ç–Ω–æ–µ —á–∏—Å–ª–æ
	LowCutoffFreq       = 1e-3                     // 0.001 –ì—Ü
	HighCutoffFreq      = 1e6                      // 1 –ú–ì—Ü
	EchoThreshold       = 0.6                      // –ø–æ—Ä–æ–≥ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —ç—Ö–∞
	Threshold           = 0.5
	Thickness           = 10.0 // –¢–æ–ª—â–∏–Ω–∞ –æ–±—Ä–∞–∑—Ü–∞ –≤ –º–º
	Mode                = "A0" // –ú–æ–¥–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º ("A0" –∏–ª–∏ "S0")
)

func main() {
	log.Println("üöÄ Starting FPGA Ultrasound Data Collector...")
	var dataBuffer []float64
	var raw = make(chan []float64)

	go func(raw chan []float64) {
		log.Println("–ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö")
		for {
			var data []float64
			err := memory.ReadFrame("", CurrentSampleRateHz, &data)
			if err != nil {
				log.Printf("‚ùå Memory read error: %v", err)
				break
			}
			raw <- data
			if err := storage.SaveSample(Path+FileWithTime+" RAW_result.csv", data); err != nil {
				log.Printf("‚ùå raw save error: %v", err)
			}
		}
		return
	}(raw)

	log.Println("–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö")
loop:
	for {
		select {
		case data := <-raw:
			dataBuffer = append(dataBuffer, data...)
			log.Printf("–î–ª–∏–Ω–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: %+v", len(dataBuffer))
			if len(dataBuffer) >= FFTKernelSize {
				break loop
			}
		}
	}

	processing(dataBuffer)
}

func processing(data []float64) {
	data = ultrasignal.TrashHoldFilter(data, Threshold)

	log.Println("1Ô∏è‚É£ –°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ —Å—Ä–µ–¥–Ω–µ–≥–æ")
	smoothed := ultrasignal.MovingAverage(data, FilterWindow)

	log.Println("2Ô∏è‚É£ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ (–ø–æ–ª–æ—Å–æ–≤–æ–π —Ñ–∏–ª—å—Ç—Ä)")
	kernel := ultrasignal.FIRBandPassKernel(FIRKernelSize, LowCutoffFreq, HighCutoffFreq, SampleRateHz)
	filteredSignal := ultrasignal.BandPassFilter(smoothed, kernel)
	if err := storage.SaveSample(Path+FileWithTime+" FIR_result.csv", filteredSignal); err != nil {
		log.Printf("‚ùå FIR save error: %v", err)
	}

	log.Println("3Ô∏è‚É£ –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ê–ß–• —Ñ–∏–ª—å—Ç—Ä–∞")
	freqsAFC, afc := ultrasignal.ComputeAFC(filteredSignal, SampleRateHz)
	if err := storage.SaveSpectrum(Path+FileWithFreq+" –ê–ß–• —Ñ–∏–ª—å—Ç—Ä–∞.csv", freqsAFC, afc); err != nil {
		log.Printf("‚ùå AFC save error: %v", err)
	}

	log.Println("4Ô∏è‚É£ –†–∞—Å—á—ë—Ç –æ–≥–∏–±–∞—é—â–µ–π —á–µ—Ä–µ–∑ –ì–∏–ª—å–±–µ—Ä—Ç–∞")
	envelopeHilbert := ultrasignal.ComputeEnvelopeHilbert(filteredSignal)
	if err := storage.SaveSample(Path+FileWithTime+" –û–≥–∏–±–∞—é—â–∞—è —á–µ—Ä–µ–∑ –ì–∏–ª—å–±–µ—Ä—Ç–∞.csv", envelopeHilbert); err != nil {
		log.Printf("‚ùå Hilbert envelope save error: %v", err)
	}

	log.Println("5Ô∏è‚É£ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —ç—Ö–æ-—Å–∏–≥–Ω–∞–ª–æ–≤ –∏ —Ä–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª–µ—Ç–∞")
	echoIndices := ultrasignal.DetectEchoes(envelopeHilbert, EchoThreshold)
	tof := ultrasignal.GetTimeOfFlight(echoIndices, SampleRateHz)
	log.Printf("‚è±Ô∏è Time of Flight: %.9f —Å–µ–∫—É–Ω–¥", tof)

	log.Println("6Ô∏è‚É£ –†–∞—Å—á—ë—Ç —Å–ø–µ–∫—Ç—Ä–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º FFT")
	windowed := ultrasignal.HammingWindow(filteredSignal[:min(len(filteredSignal), FFTKernelSize)])
	frequencies, spectrum := ultrasignal.ComputeFFTLog(windowed, SampleRateHz, math.Pow(10.0, -3.0), math.Pow(10.0, 6), FFTKernelSize)
	if err := storage.SaveSpectrum(Path+FileWithFreq+" –°–ø–µ–∫—Ç—Ä —Å–∏–≥–Ω–∞–ª–∞.csv", frequencies, spectrum); err != nil {
		log.Printf("‚ùå Spectrum save error: %v", err)
	}

	log.Println("7Ô∏è‚É£ –†–∞—Å—á—ë—Ç —Ñ–∞–∑–æ–≤–æ–π –∏ –≥—Ä—É–ø–ø–æ–≤–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–æ—Ç—ã")
	var phaseVel []float64
	var groupVel []float64
	for _, freq := range frequencies {
		phaseVelC := ultrasignal.PhaseVelocity(freq, Thickness, Mode)
		groupVelC := ultrasignal.GroupVelocity(freq, Thickness, Mode)

		phaseVel = append(phaseVel, phaseVelC)
		groupVel = append(groupVel, groupVelC)
	}

	if err := storage.SaveSample(Path+FileWithTime+" PhaseVelocity"+".csv", phaseVel); err != nil {
		log.Printf("‚ùå Phase velocity save error: %v", err)
	}
	if err := storage.SaveSample(Path+FileWithTime+" GroupVelocity"+".csv", groupVel); err != nil {
		log.Printf("‚ùå Group velocity save error: %v", err)
	}

	log.Println("–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≤–µ–¥–µ–Ω")
	time.Sleep(ultrasignal.FreqToTime(CurrentSampleRateHz))
}
